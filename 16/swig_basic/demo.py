# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_demo', [dirname(__file__)])
        except ImportError:
            import _demo
            return _demo
        if fp is not None:
            try:
                _mod = imp.load_module('_demo', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _demo = swig_import_helper()
    del swig_import_helper
else:
    import _demo
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x



def fopen(*args):
  return _demo.fopen(*args)
fopen = _demo.fopen

def fputs(*args):
  return _demo.fputs(*args)
fputs = _demo.fputs

def fclose(*args):
  return _demo.fclose(*args)
fclose = _demo.fclose

def print_global():
  return _demo.print_global()
print_global = _demo.print_global

def make_array(*args):
  return _demo.make_array(*args)
make_array = _demo.make_array

def free_array(*args):
  return _demo.free_array(*args)
free_array = _demo.free_array

def get_element(*args):
  return _demo.get_element(*args)
get_element = _demo.get_element

def set_element(*args):
  return _demo.set_element(*args)
set_element = _demo.set_element
class Point(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _demo.Point_x_set
    __swig_getmethods__["x"] = _demo.Point_x_get
    if _newclass:x = _swig_property(_demo.Point_x_get, _demo.Point_x_set)
    __swig_setmethods__["y"] = _demo.Point_y_set
    __swig_getmethods__["y"] = _demo.Point_y_get
    if _newclass:y = _swig_property(_demo.Point_y_get, _demo.Point_y_set)
    def __init__(self): 
        this = _demo.new_Point()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _demo.delete_Point
    __del__ = lambda self : None;
Point_swigregister = _demo.Point_swigregister
Point_swigregister(Point)
cvar = _demo.cvar

class CPoint(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPoint, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPoint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _demo.CPoint_x_set
    __swig_getmethods__["x"] = _demo.CPoint_x_get
    if _newclass:x = _swig_property(_demo.CPoint_x_get, _demo.CPoint_x_set)
    __swig_setmethods__["y"] = _demo.CPoint_y_set
    __swig_getmethods__["y"] = _demo.CPoint_y_get
    if _newclass:y = _swig_property(_demo.CPoint_y_get, _demo.CPoint_y_set)
    def power(self): return _demo.CPoint_power(self)
    def __init__(self): 
        this = _demo.new_CPoint()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _demo.delete_CPoint
    __del__ = lambda self : None;
CPoint_swigregister = _demo.CPoint_swigregister
CPoint_swigregister(CPoint)


def add_mult(*args):
  return _demo.add_mult(*args)
add_mult = _demo.add_mult

def add(*args):
  return _demo.add(*args)
add = _demo.add

def inc(*args):
  return _demo.inc(*args)
inc = _demo.inc

def sum_func(*args):
  return _demo.sum_func(*args)
sum_func = _demo.sum_func
cb_square = _demo.cb_square

def square(*args):
  return _demo.square(*args)
square = _demo.square
cb_reciprocal = _demo.cb_reciprocal

def reciprocal(*args):
  return _demo.reciprocal(*args)
reciprocal = _demo.reciprocal
cb_linear = _demo.cb_linear

def linear(*args):
  return _demo.linear(*args)
linear = _demo.linear
class Sum(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Sum, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Sum, name)
    __repr__ = _swig_repr
    def Cal(self, *args): return _demo.Sum_Cal(self, *args)
    def Func(self, *args): return _demo.Sum_Func(self, *args)
    def __init__(self): 
        if self.__class__ == Sum:
            _self = None
        else:
            _self = self
        this = _demo.new_Sum(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _demo.delete_Sum
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _demo.disown_Sum(self)
        return weakref_proxy(self)
Sum_swigregister = _demo.Sum_swigregister
Sum_swigregister(Sum)

# This file is compatible with both classic and new-style classes.


